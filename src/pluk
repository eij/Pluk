#!/bin/bash

VERSION="0.8.2"

#	Settings

TEST_PATH="/tmp/"

TEST_DUMMY="$TEST_PATH.dummy-$RANDOM"
TEST_DUMMY_SIZE="256"

TEST_ITERATIONS="3"

TEST_PROGRESS="n"
TEST_PROGRESS_BAR="pv -p $TEST_DUMMY"

TEST_REPORT="n"
TEST_REPORT_PATH="$HOME"
TEST_REPORT_FILE="$TEST_REPORT_PATH/Report-$RANDOM.html"

declare -A TEST_LIST



#	Generic Functions

function is-installed { type -P $1 &>/dev/null || { echo "$1 is missing. Please, install it." >&2; exit 1; }; }

function mk-dummy {
	if [[ `uname -s` == "Linux" ]]; then
		dd if=/dev/zero of=$TEST_DUMMY bs=1000000 count=$TEST_DUMMY_SIZE >/dev/null 2>&1;
	elif [[ `uname -s` == "Darwin" ]]; then
		dd if=/dev/zero of=$TEST_DUMMY bs=1MB count=$TEST_DUMMY_SIZE >/dev/null 2>&1;
	fi
}

function rm-dummy { rm -f $TEST_DUMMY*; }

function test-abort { rm-dummy; echo; exit 0; }

function diff-time { echo $1 $2 | awk '{printf("%.2f", $1-$2)}'; }

function print-dummy { echo -e "Dummy $TEST_DUMMY_SIZE mb, $TEST_ITERATIONS times\n"; }

function process-result {
	_RES=`echo $1 $2 | awk '{printf("%.2f", $1/$2)}'`

	# TEST_LIST["$TEST_ACTIVE"]="${TEST_LIST[$TEST_ACTIVE]@]}:$TEST_DUMMY_SIZE|$_RES$3"

	TEST_LIST["$TEST_ACTIVE"]="${TEST_LIST[$TEST_ACTIVE]@]}, $_RES"

	echo -e "\nAverage: $_RES$3";
}

function make-report {
	echo '<!DOCTYPE HTML>
<html>
	<head>
		<title>Report</title>

		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"></script>

		<script type="text/javascript">
			$(function(){
				result = new Array();' > $TEST_REPORT_FILE

	for i in ${!TEST_LIST[@]}
	do
		VALUES=`echo ${TEST_LIST[$i]} | awk '{print substr($0, 3)}'`

		echo "				result['$i'] = [ $VALUES ];" >> $TEST_REPORT_FILE
	done

	echo '

				for (key in result) {
					result_max = result[key][0];

					for (i = 0; i < result[key].length; i++) result_max = Math.max(result_max, result[key][i]);

					$("#bars").append('\''<span class="desc">'\'' + key + '\''</span>'\'');

					for (v in result[key]) {
						bar = $('\''<span class="bar">'\'' + result[key][v] + '\''</span>'\'');

						$("#bars").append(bar);

						bar.animate({"width": (100 * result[key][v] / result_max) + "%"}, "slow");
					}
				}
			});
		</script>

		<style>
			body { font-size: 12px; font-family: sans-serif; }

			#container { width: 800px; text-align: center; margin: auto; }
			#bars { width: 500px; margin: auto; text-align: left; }

			.desc { color: #666; margin: 10px; }

			.bar { color: #333; font-size: 0.9em; text-shadow: 1px 1px 1px #ccc;
				display: block; width: 0px; min-height: 10px; background-color: #ccc; padding: 5px; margin-bottom: 20px;
				-webkit-box-shadow: 1px 1px 2px #ccc; -moz-box-shadow: 1px 1px 2px #ccc; box-shadow: 1px 1px 2px #ccc;
				-moz-border-radius-topright: 3px; -moz-border-radius-bottomright: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px;

				background: #ffffff; background: -moz-linear-gradient(top, #ffffff 0%, #e5e5e5 100%);
				background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffffff), color-stop(100%,#e5e5e5));
				filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='\''#ffffff'\'', endColorstr='\''#e5e5e5'\'',GradientType=0 );
			}
			.bar:hover { filter: alpha(opacity=50); -moz-opacity: 0.5; -khtml-opacity: 0.5; opacity: 0.5; }
		</style>
	</head>

	<body>
		<div id="container">
			<div id="bars"></div>
		</div>
	</body>
</html>' >> $TEST_REPORT_FILE
}

function run-test {
	TEST_ACTIVE="$1"

	unset _AVG

	case $1 in
		compress-gz)
			is-installed gzip

			echo -e "Running GZIP compression..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | gzip > $TEST_DUMMY.gz"
			else
				TEST_COMMAND="gzip -q $TEST_DUMMY"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		compress-xz)
			is-installed xz

			echo -e "Running XZ compression..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | xz > $TEST_DUMMY.xz"
			else
				TEST_COMMAND="xz $TEST_DUMMY"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		compress-bz2)
			is-installed bzip2

			echo -e "Running BZIP2 compression..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | bzip2 > $TEST_DUMMY.bz2"
			else
				TEST_COMMAND="bzip2 $TEST_DUMMY"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		compress-lzo)
			is-installed lzop

			echo -e "Running LZOP compression..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | lzop > $TEST_DUMMY.lzo"
			else
				TEST_COMMAND="lzop $TEST_DUMMY"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		compress-7z)
			is-installed 7z

			echo -e "Running 7z compression..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | 7z -bd -si a $TEST_DUMMY.7z >/dev/null 2>&1"
			else
				TEST_COMMAND="7z -bd a $TEST_DUMMY.7z $TEST_DUMMY >/dev/null 2>&1"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		7zip)
			is-installed 7z

			echo -e "Running 7z benchmark..\n"

			test-7z
			;;
		openssl)
			is-installed openssl

			echo -e "Running OpenSSL RSA4096..\n"

			test-openssl $TEST_ITERATIONS 
			;;
		gnupg)
			is-installed gpg

			echo -e "Running GPG..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | gpg -c --passphrase $RANDOM -o /dev/null -"
			else
				TEST_COMMAND="gpg -c --passphrase $RANDOM -o /dev/null $TEST_DUMMY"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		pi)
			is-installed bc

			echo -e "Running Pi..\n"

			TEST_COMMAND="echo 'scale=5000; 4*a(1)' | bc -l > /dev/null"

			generic-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		exponential)
			is-installed bc

			echo -e "Running Exponential..\n"

			TEST_COMMAND="echo 'scale=4000; e(1)' | bc -l > /dev/null"

			generic-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		*)
			if [ -z "$TEST_GUI" ]; then
				echo -e "Test not found.\n"

				display-tests
			fi

			exit 0
			;;
	esac
}

trap test-abort INT



#	Tests

function generic-iteration {
	for ((i=1; i <= $1; i++))
	do

		_START=`date +%s.%N`

		eval $2

		_STOP=`date +%s.%N`

		_RES=`diff-time $_STOP $_START`

		_AVG=`echo $_AVG $_RES | awk '{printf("%.2f", $1+$2)}'`

		echo "  #$i	$_RES"s

	done

	process-result $_AVG $1 's'
}

function generic-dummy-iteration {
	print-dummy

	for ((i=1; i <= $1; i++))
	do
		mk-dummy

		_START=`date +%s.%N`

		eval $2

		_STOP=`date +%s.%N`

		_RES=`diff-time $_STOP $_START`

		_AVG=`echo $_AVG $_RES | awk '{printf("%.2f", $1+$2)}'`

		echo "  #$i	$_RES"s

		rm-dummy

		sleep 2
	done

	process-result $_AVG $1 's'
}

function test-openssl {
	for ((i=1; i <= $1; i++))
	do
		_TEST=`openssl speed -mr rsa4096 2>&1 1>/dev/null`

		_RES=`echo $_TEST | cut -d' ' -f2 | cut -d: -f4`

		_AVG=`echo $_AVG $_RES | awk '{printf("%f", $1+$2)}'`

		echo "  #$i	$_RES signs/s"
	done

	process-result $_AVG $1 ' signs/s'
}

function test-7z {
	TEST_DUMMY_7z=$TEST_PATH.7z-benchmark

	7z b > $TEST_DUMMY_7z

	for ((i=2; i <= 5; i++))
	do
		_VALUE=`cat $TEST_DUMMY_7z | grep 2$i: | cut -d' ' -f5`

		echo "#$(($i-1))  $_VALUE"

		_AVG=`echo $_AVG $_VALUE | awk '{printf("%d", $1+$2)}'`
	done

	rm $TEST_DUMMY_7z

	process-result $_AVG '4' 'mips'
}



#	Lists

function display-version { echo -e "Pluk $VERSION\nA simple benchmarking tool."; }

function display-help {
	echo "Usage: pluk [OPTIONS] -t <TEST>"
	echo
	echo "  -h               display this help"
	echo "  -l               display available tests"
	echo "  -g               display available tests from a gui"
	echo "  -v               display version number"
	echo
	echo "  -p               use progress bar (works for most of the tests)"
	echo "  -r               make HTML report"
	echo "  -n NUM           number of tests (default 3)"
	echo "  -s NUM           size of the dummy file in MB (default 256)"
	echo "  -t TEST          run specific test"
}

function display-tests {
	echo "  Compress"
	echo
	echo "    compress-gz             compress using GZIP"
	echo "    compress-xz             compress using XZ"
	echo "    compress-bz2            compress using BZIP2"
	echo "    compress-lzo            compress using LZOP"
	echo "    compress-7z             compress using 7z"
	echo
	echo
	echo "  Mathematical"
	echo
	echo "    pi                      calculate PI, 5k decimals"
	echo "    exponential             calculate EXP(1), 4k decimals"
	echo
	echo
	echo "  Various"
	echo
	echo "    7zip                    7z native benchmark"
	echo "    openssl                 calculate OpenSSL RSA4096"
	echo "    gnupg                   generate GPG Key of a dummy file"
}

function display-gui {
	zenity --title "Pluk" --text "Please choose a test from the list below" --width=450 --height=320 \
		--list --radiolist --column="" --column="Name" --column="Type" --column="Description" \
		true "compress-gz" "Processor" "Compress a file using GZip." \
		false "compress-xz" "Processor" "Compress a file using XZ." \
		false "compress-bz2" "Processor" "Compress a file using BZip2." \
		false "compress-lzo" "Processor" "Compress a file using LZOP." \
		false "compress-7z" "Processor" "Compress a file using 7Zip." \
		false "pi" "Processor" "Calculate Pi, 5k decimals." \
		false "exponential" "Processor" "Calculate EXP(1), 2k decimals." \
		false "7zip" "Processor" "7Zip native benchmark." \
		false "openssl" "Processor" "Calculate OpenSSL RSA4096." \
		false "gnupg" "Processor" "Generate GPG key of a dummy file."
}



while getopts  "hlgvprs:n:t:" OPT
do

	case $OPT in
		h)
			display-help

			exit 0
			;;
		l)
			display-tests

			exit 0
			;;
		g)
			is-installed zenity

			TEST_GUI="y"

			run-test `display-gui`

			exit 0
			;;
		p)
			TEST_PROGRESS="y"
			;;
		r)
			TEST_REPORT="y"
			;;
		n)
			TEST_ITERATIONS=$OPTARG
			;;
		s)
			TEST_DUMMY_SIZE=$OPTARG
			;;
		t)
			echo

			run-test $OPTARG
			;;
		v)
			display-version

			exit 0
			;;
		*)
			display-help

			exit 0
			;;
	esac

done

if [ "$TEST_REPORT" == "y" ]; then
	echo -e "\nMaking report.."

	make-report
fi

if [ "$OPTIND" -eq "1" ]; then
	display-help
fi

exit 0
