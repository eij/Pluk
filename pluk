#!/bin/bash

VERSION="0.4"

#	Settings

TEST_PATH="/tmp/"

TEST_DUMMY="$TEST_PATH.dummy-$RANDOM"
TEST_DUMMY_SIZE="256"

TEST_ITERATIONS="3"



#	Generic Functions

function is-installed { type -P $1 &>/dev/null || { echo "$1 is missing. Please, install it." >&2; exit 1; }; }

function mk-dummy { dd if=/dev/zero of=$TEST_DUMMY bs=1MB count=$TEST_DUMMY_SIZE >/dev/null 2>&1; }

function rm-dummy { rm -f $TEST_DUMMY*; }

function diff-time { echo $1 $2 | awk '{printf("%.2f", $1-$2)}'; }

function print-dummy { echo -e "Dummy $TEST_DUMMY_SIZE mb, $TEST_ITERATIONS times\n"; }

function print-result { echo -e "\nAverage: `echo $1 $2 | awk '{printf("%.2f", $1/$2)}'`$3"; }

function run-test {
	case $1 in
		compress-gz)
			is-installed gzip

			echo -e "Running GZIP Compression..\n"

			generic-iteration $TEST_ITERATIONS "gzip -q $TEST_DUMMY"
			;;
		compress-xz)
			is-installed xz

			echo -e "Running XZ Compression..\n"

			generic-iteration $TEST_ITERATIONS "xz -q $TEST_DUMMY"
			;;
		compress-bz2)
			is-installed bzip2

			echo -e "Running BZIP2 Compression..\n"

			generic-iteration $TEST_ITERATIONS "bzip2 -q $TEST_DUMMY"
			;;
		compress-lzo)
			is-installed lzop

			echo -e "Running LZO Compression..\n"

			generic-iteration $TEST_ITERATIONS "lzop -q $TEST_DUMMY"
			;;
		compress-7z)
			is-installed 7z

			echo -e "Running 7z Compression..\n"

			generic-iteration $TEST_ITERATIONS "7z -bd a $TEST_DUMMY.7z $TEST_DUMMY"
			;;
		7z-bench)
			is-installed 7z

			echo -e "Running 7z Benchmark..\n"

			test-7z
			;;
		openssl)
			is-installed openssl

			echo -e "Running OpenSSL RSA4096..\n"

			test-openssl $TEST_ITERATIONS 
			;;
		gnupg)
			is-installed gpg

			echo -e "Running GPG..\n"

			generic-iteration $TEST_ITERATIONS "gpg -c --passphrase $RANDOM -o /dev/null $TEST_DUMMY"
			;;
		*)
			echo -e "Test not found.\n"

			display-tests

			exit 0
			;;
	esac
}



#	Tests

function generic-iteration {
	print-dummy

	for ((i=1; i <= $1; i++))
	do
		mk-dummy

		_START=`date +%s.%N`

		$2 >/dev/null 2>&1

		_STOP=`date +%s.%N`

		_RES=`diff-time $_STOP $_START`

		_AVG=`echo $_AVG $_RES | awk '{printf("%.2f", $1+$2)}'`

		echo "  #$i	$_RES"s

		rm-dummy

		sleep 2
	done

	print-result $_AVG $1 's'
}

function test-openssl {
	for ((i=1; i <= $1; i++))
	do
		_TEST=`openssl speed -mr rsa4096 2>&1 1>/dev/null`

		_RES=`echo $_TEST | cut -d' ' -f2 | cut -d: -f4`

		_AVG=`echo $_AVG $_RES | awk '{printf("%f", $1+$2)}'`

		echo "  #$i	$_RES signs/s"
	done

	print-result $_AVG $1 ' signs/s'
}

function test-7z {
	TEST_DUMMY_7z=$TEST_PATH.7z-benchmark

	7z b > $TEST_DUMMY_7z

	for ((i=2; i <= 5; i++))
	do
		_VALUE=`cat $TEST_DUMMY_7z | grep 2$i: | cut -d' ' -f5`

		echo "#$(($i-1))  $_VALUE"

		_AVG=`echo $_AVG $_VALUE | awk '{printf("%d", $1+$2)}'`
	done

	rm $TEST_DUMMY_7z

	print-result $_AVG '4' 'mips'
}



#	Lists

function display-version { echo -e "Pluk $VERSION\nA simple benchmarking tool."; }

function display-help {
	echo "Usage: pluk [OPTIONS] -t <TEST>"
	echo
	echo "  -h		display this help"
	echo "  -l		display available tests"
	echo "  -v              display version number"
	echo
	echo "  -n <N>          number of tests (default 3)"
	echo "  -s <N>          size of the dummy file in MB (default 256)"
	echo "  -t <test>	run specific test"
}

function display-tests {
	echo "Poocessor"
	echo
	echo "  compress-gz             use GZIP"
	echo "  compress-xz             use XZ"
	echo "  compress-bz2            use BZIP2"
	echo "  compress-lzo            use LZOP"
	echo "  compress-7z             use 7z"
	echo
	echo "  7z-bench                7z Benchmark"
	echo "  openssl                 OpenSSL RSA4096"
	echo "  gnupg                   GPG Key"
}



while getopts  "hlvs:n:t:" OPT
do

	case $OPT in
		h)
			display-help

			exit 0
			;;
		l)
			display-tests

			exit 0
			;;
		n)
			TEST_ITERATIONS=$OPTARG
			;;
		s)
			TEST_DUMMY_SIZE=$OPTARG
			;;
		t)
			run-test $OPTARG

			exit 0
			;;
		v)
			display-version

			exit 0
			;;
		*)
			display-help

			exit 0
			;;
	esac

done

if [ "$OPTIND" -eq "1" ]; then
	display-help
fi

exit 0
