#!/bin/bash

VERSION="1.0"

#	Settings

TEST_PATH="/tmp/"

TEST_DUMMY="$TEST_PATH.dummy-$RANDOM"
TEST_DUMMY_SIZE="256"

TEST_ITERATIONS="3"

TEST_PROGRESS="n"
TEST_PROGRESS_BAR="pv -p $TEST_DUMMY"



#	Generic Functions

function is-installed {
	type -P $1 &>/dev/null || {
		if [ "$TEST_GUI" == "y" ]; then
			zenity --error --title "Pluk" --text "$1 is missing. Please, install it."
		else
			echo "$1 is missing. Please, install it."
		fi

		exit 1
	}
}

function info-cpu-model { awk -F ':' '/^model name/ {print $2; exit}' /proc/cpuinfo | sed 's/^ *//'; }

function info-cpu-number { grep '^processor' /proc/cpuinfo | wc -l; }

function info-cpu-bogomips { awk -F ':' '/^bogomips/ {B += $2} END {print B}' /proc/cpuinfo; }

function info-kernel { uname -sr; }

function dummy-mk { dd if=/dev/zero of=$TEST_DUMMY bs=1000000 count=$TEST_DUMMY_SIZE > /dev/null 2>&1; }

function dummy-rm { rm -f $TEST_DUMMY*; }

function dummy-rm-compressed { rm -f $TEST_DUMMY.*; }

function dummy-print { echo -e "Dummy $TEST_DUMMY_SIZE mb, $TEST_ITERATIONS times\n"; }

function float-sub { echo $1 $2 | sed 's/N/0/' | awk '{printf("%.2f", $1-$2)}'; }

function float-sum { echo $1 $2 | sed 's/N/0/' | awk '{printf("%.2f", $1+$2)}'; }

function test-result { echo -e "\nAverage `echo $1 $2 | awk '{printf("%.2f", $1/$2)}'`$3"; }

function test-run {
	unset _AVG

	case $1 in
		write)
			echo -e "Running Write..\n"

			PV_SIZE=$TEST_DUMMY_SIZE"M"

			if [ "$TEST_DUMMY_SIZE" -lt "500" ]; then
				TEST_DUMMY_SIZE="1024"
			fi

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="dd if=/dev/zero bs=1000000 count=$TEST_DUMMY_SIZE 2>&1 | pv -s $PV_SIZE -p > $TEST_DUMMY"
			else
				TEST_COMMAND="dd if=/dev/zero of=$TEST_DUMMY bs=1000000 count=$TEST_DUMMY_SIZE > /dev/null 2>&1"
			fi

			TEST_CLOSE="sleep 1 && dummy-rm"

			generic-iteration $TEST_ITERATIONS "$TEST_COMMAND" "$TEST_CLOSE"
			;;
		read)
			echo -e "Running Read..\n"

			PV_SIZE=$TEST_DUMMY_SIZE"M"

			if [ "$TEST_DUMMY_SIZE" -lt "500" ]; then
				TEST_DUMMY_SIZE="1024"
			fi

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="dd if=$TEST_DUMMY bs=64k 2>&1 | pv -ps $PV_SIZE | dd of=/dev/null > /dev/null 2>&1"
			else
				TEST_COMMAND="dd if=$TEST_DUMMY bs=64k 2>&1 | dd of=/dev/null > /dev/null 2>&1"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		compress-gz)
			is-installed gzip

			echo -e "Running GZIP compression..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | gzip > $TEST_DUMMY.gz"
			else
				TEST_COMMAND="gzip -qc $TEST_DUMMY > $TEST_DUMMY.gz"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		compress-xz)
			is-installed xz

			echo -e "Running XZ compression..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | xz > $TEST_DUMMY.xz"
			else
				TEST_COMMAND="xz -c $TEST_DUMMY > $TEST_DUMMY.xz"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		compress-bz2)
			is-installed bzip2

			echo -e "Running BZIP2 compression..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | bzip2 > $TEST_DUMMY.bz2"
			else
				TEST_COMMAND="bzip2 -c $TEST_DUMMY > $TEST_DUMMY.bz2"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		compress-lzo)
			is-installed lzop

			echo -e "Running LZOP compression..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | lzop > $TEST_DUMMY.lzo"
			else
				TEST_COMMAND="lzop $TEST_DUMMY"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		compress-7z)
			is-installed 7z

			echo -e "Running 7z compression..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | 7z -bd -si a $TEST_DUMMY.7z >/dev/null 2>&1"
			else
				TEST_COMMAND="7z -bd a $TEST_DUMMY.7z $TEST_DUMMY >/dev/null 2>&1"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		7zip)
			is-installed 7z

			echo -e "Running 7z benchmark..\n"

			test-7z
			;;
		openssl)
			is-installed openssl

			echo -e "Running OpenSSL RSA4096..\n"

			test-openssl $TEST_ITERATIONS 
			;;
		gnupg)
			is-installed gpg

			echo -e "Running GPG..\n"

			if [ "$TEST_PROGRESS" == "y" ]; then
				TEST_COMMAND="$TEST_PROGRESS_BAR | gpg -c --passphrase $RANDOM -o /dev/null -"
			else
				TEST_COMMAND="gpg -c --passphrase $RANDOM -o /dev/null $TEST_DUMMY"
			fi

			generic-dummy-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		pi)
			is-installed bc

			echo -e "Running Pi..\n"

			TEST_COMMAND="echo 'scale=5000; 4*a(1)' | bc -l > /dev/null"

			generic-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		exponential)
			is-installed bc

			echo -e "Running Exponential..\n"

			TEST_COMMAND="echo 'scale=4000; e(1)' | bc -l > /dev/null"

			generic-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		fibonacci)
			echo -e "Running Fibonacci..\n"

			TEST_COMMAND="fibonacci 1000000"

			generic-iteration $TEST_ITERATIONS "$TEST_COMMAND"
			;;
		*)
			if [ -z "$TEST_GUI" ]; then
				echo -e "Test not found.\n"

				display-tests
			fi

			exit 0
			;;
	esac
}

function test-end { dummy-rm; echo; exit 0; }

trap test-end INT



#	Specific Functions

function fibonacci {
	_x=0; _y=1;

	for ((_n=1; _n <= $1; _n=$_n+1))
	do
		_x=$(($_x + $_y))
		_y=$(($_x - $_y))
	done
}



#	Tests

function generic-iteration {
	for ((i=1; i <= $1; i++))
	do
		_START=`date +%s.%N`

		eval $2

		_STOP=`date +%s.%N`

		if [ "$3" ]; then
			eval $3
		fi

		_RES=`float-sub $_STOP $_START`

		_AVG=`float-sum $_AVG $_RES`

		echo "  #$i	$_RES"s
	done

	test-result $_AVG $1 's'
}

function generic-dummy-iteration {
	dummy-print

	dummy-mk

	for ((i=1; i <= $1; i++))
	do
		sleep 2

		_START=`date +%s.%N`

		eval $2

		_STOP=`date +%s.%N`

		_RES=`float-sub $_STOP $_START`

		echo "  #$i	$_RES"s

		_AVG=`float-sum $_AVG $_RES`

		dummy-rm-compressed

		sleep 2
	done

	dummy-rm

	test-result $_AVG $1 's'
}

function test-openssl {
	for ((i=1; i <= $1; i++))
	do
		_TEST=`openssl speed -mr rsa4096 2>&1 1>/dev/null`

		_RES=`echo $_TEST | cut -d' ' -f2 | cut -d: -f4`

		echo "  #$i	$_RES signs/s"

		_AVG=`float-sum $_AVG $_RES`
	done

	test-result $_AVG $1 ' signs/s'
}

function test-7z {
	TEST_DUMMY_7z=$TEST_PATH.7z-benchmark

	7z b > $TEST_DUMMY_7z

	for ((i=2; i <= 5; i++))
	do
		_VALUE=`cat $TEST_DUMMY_7z | grep 2$i: | cut -d' ' -f5`

		echo "#$(($i-1))  $_VALUE"

		_AVG=`float-sum $_AVG $_VALUE`
	done

	rm $TEST_DUMMY_7z

	test-result $_AVG '4' 'mips'
}



#	Lists

function display-version { echo -e "Pluk $VERSION\nBenchmarking tool."; }

function display-help {
	echo "Usage: pluk [OPTIONS] -t <TEST>"
	echo
	echo "  -h               display this help"
	echo "  -i               display system informations"
	echo "  -l               display available tests"
	echo "  -g               display available tests from a gui"
	echo "  -v               display version number"
	echo
	echo "  -p               use progress bar (works for most of the tests)"
	echo "  -n NUM           number of tests (default 3)"
	echo "  -s NUM           size of the dummy file in MB (default 256)"
	echo "  -t TEST          run specific test"
}

function display-tests {
	echo "  Processor"
	echo
	echo "    pi                      calculate PI, 5k decimals"
	echo "    exponential             calculate EXP(1), 4k decimals"
	echo "    fibonacci               calculate Fibonacci(1kk)"
	echo
	echo "    openssl                 calculate OpenSSL RSA4096"
	echo "    7zip                    7z native benchmark"
	echo
	echo "    compress-gz             compress using GZIP"
	echo "    compress-xz             compress using XZ"
	echo "    compress-bz2            compress using BZIP2"
	echo "    compress-lzo            compress using LZOP"
	echo "    compress-7z             compress using 7z"
	echo
	echo "    gnupg                   generate GPG Key of a dummy file"
	echo
	echo "  Disk"
	echo
	echo "    read                    reads a big file"
	echo "    write                   writes a big file"
}

function display-gui {
	zenity --title "Pluk" --text "Please choose a test from the list below" --width=500 --height=400 \
		--list --radiolist --column="" --column="Name" --column="Type" --column="Description" \
		true "pi" "Processor" "Calculate Pi, 5k decimals." \
		false "exponential" "Processor" "Calculate EXP(1), 2k decimals." \
		false "fibonacci" "Processor" "Calculate Fibonacci(1kk)" \
		false "openssl" "Processor" "Calculate OpenSSL RSA4096." \
		false "7zip" "Processor" "7Zip native benchmark." \
		false "compress-gz" "Processor" "Compress a file using GZip." \
		false "compress-xz" "Processor" "Compress a file using XZ." \
		false "compress-bz2" "Processor" "Compress a file using BZip2." \
		false "compress-lzo" "Processor" "Compress a file using LZOP." \
		false "compress-7z" "Processor" "Compress a file using 7Zip." \
		false "gnupg" "Processor" "Generate GPG key of a dummy file." \
		false "read" "Disk" "Reads a big file." \
		false "write" "Disk" "Writes a big file."
}

function display-info {
	echo
	echo "CPU          `info-cpu-model`, `info-cpu-number` cores. (`info-cpu-bogomips` bogomips)"
	echo "KERNEL       `info-kernel`"
	echo
}



while getopts  "hilgvps:n:t:" OPT
do
	case $OPT in
		h)
			display-help

			exit 0
			;;
		i)
			display-info
			;;
		l)
			display-tests

			exit 0
			;;
		g)
			is-installed zenity

			TEST_GUI="y"

			test-run `display-gui`

			exit 0
			;;
		p)
			is-installed pv

			TEST_PROGRESS="y"
			;;
		n)
			TEST_ITERATIONS=$OPTARG
			;;
		s)
			TEST_DUMMY_SIZE=$OPTARG
			;;
		t)
			TEST_NAME=$OPTARG
			;;
		v)
			display-version

			exit 0
			;;
		*)
			display-help

			exit 0
			;;
	esac
done

if [ "$OPTIND" -eq "1" ]; then
	display-help
else
	if [ "$TEST_NAME" ]; then
		test-run $TEST_NAME
	fi
fi

exit 0
